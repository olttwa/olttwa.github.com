<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Akshat's Blog]]></title>
  <link href="http://olttwa.com/atom.xml" rel="self"/>
  <link href="http://olttwa.com/"/>
  <updated>2017-10-03T03:06:21+05:30</updated>
  <id>http://olttwa.com/</id>
  <author>
    <name><![CDATA[Akshat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Load Balancing in gRPC for Frontend Backend Communication Part:1]]></title>
    <link href="http://olttwa.com/blog/2017/10/02/load-balancing-in-grpc-for-frontend-backend-communication-part-1/"/>
    <updated>2017-10-02T23:51:56+05:30</updated>
    <id>http://olttwa.com/blog/2017/10/02/load-balancing-in-grpc-for-frontend-backend-communication-part-1</id>
    <content type="html"><![CDATA[<p>We needed a strategy for load balancing incoming requests from our user-facing applications (android and ios) for communication in <a href="http://grpc.io/">gRPC</a>. The reasons for choosing a strategy is mentioned here. Implementation details can be found in Part:2</p>

<!-- more -->


<h3>Need for gRPC</h3>

<p>I work at Go-Jek as a product engineer. Here we have multiple use-cases wherein gRPC would make more sense compared to the traditional REST api for communication between frontend-backend. Examples: Customer application live tracking a driver&rsquo;s location, recording location of a driver, chat sessions, etc. We are building a small feature which can even be implemented using REST api. But we decided to use this as an opportunity to explore gRPC.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup></p>

<h3>Choosing a load balancing(LB) strategy</h3>

<p>I started from the official <a href="https://grpc.io/blog/loadbalancing">load balancing blog</a></p>

<h4>First decision</h4>

<p>The first decision was choosing between proxy or client side LB.</p>

<p>In <code>Proxy LB</code>, the clients themselves do not know about the backend servers. Clients can be untrusted. This architecture is typically used for user facing services where clients from open internet can connect to servers in a data center. In this scenario, clients make requests to LB. The LB passes on the request to one of the backends, and the backends report load to LB.</p>

<p>In <code>Client side LB</code>, the client is aware of multiple backend servers and chooses one to use for each RPC. The client gets load reports from backend servers and the client implements the LB algorithms. In simpler configurations server load is not considered and client can just round-robin between available servers.</p>

<p>This was an easy choice. I chose <code>Proxy side LB</code></p>

<p>Here are cons in <code>Client side LB</code></p>

<ul>
<li>Have to implement same logic in multiple languages</li>
<li>Client cannot be trusted</li>
<li>Client has to take care of service discovery</li>
</ul>


<p>For sake of balance, here are cons for <code>Proxy side LB</code></p>

<ul>
<li>LB is in the data path</li>
<li>Higher latency</li>
<li>LB throughput may limit scalability</li>
</ul>


<p>Sidenote: <code>Client Side Lookaside LB</code> may seem promising but still client will have a lot of logic which could easily be put into the LB.</p>

<h4>Second decision</h4>

<p>Now comes a very difficult choice: <code>Transport level LB</code> or <code>Application level LB</code></p>

<p>I chose <code>Transport level LB</code> because:</p>

<ul>
<li>RPC load doesn&rsquo;t vary a lot among connections (atleast for the current feature)</li>
<li>Latency is paramount. (Although for a frontend backend communication, I am sure a difference in a few milliseconds at LB level won&rsquo;t matter)</li>
<li>Far more complex code base for <code>Application level LB</code></li>
</ul>


<p>Some cons of <code>Application level LB</code> are:</p>

<ul>
<li>Difficult to scale</li>
<li>Requires very high performance hardware. (With the maturity of infrastructure at Go-Jek this is not an issue really, but is omttwaüòÖ)</li>
</ul>


<p>One major reason for choosing <code>Transport level LB</code> is that <code>Application level LB</code> would have been over-kill for us. For the current feature implementation, we don&rsquo;t need session stickiness which is one of the major reasons people choose <code>Application level LB</code></p>

<p>These blogs helped me weigh pros-cons of <code>Transport level LB</code> vs <code>Application level LB</code> <sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup></p>

<h4>Third decision</h4>

<p>The highest amount of yak-shaving went in this decision. I knew in my heart all along that I&rsquo;d use envoyproxy as a LB. To be thorough, I went through a whole lot of blogs<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup> just to be completely sure.</p>

<p>I won&rsquo;t mention the reasons for not choosing HAProxy or NGINX. <a href="http://envoyproxy.github.io/">Envoyproxy</a> wins hands-down because it fit the following use-cases we needed:</p>

<ul>
<li>Our frontend application can switch to HTTP/1.1 based REST apis anytime it wantsüòç Envoy supports a gRPC bridge filter that allows gRPC requests to be sent to Envoy over HTTP/1.1. Envoy then translates the requests to HTTP/2 for transport to the target server. The response is translated back to HTTP/1.1<sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup></li>
<li>Future of Envoy is promising<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup></li>
<li>Has first class support for HTTP/2</li>
<li>Hot restarts</li>
<li>Multithreaded architecture</li>
<li>Service discovery. (Go-Jek is rapidly moving towards an architecture where service mesh is inevitable)</li>
</ul>


<p>In Part 2, I will illustrate a LB implemented using envoyproxy. WIP can be found here: <a href="https://github.com/olttwa/grpc-envoyproxy">github link</a></p>

<hr />

<hr />

<p>I hope this blog was helpful üòÄ. Please leave your thoughts in the comments section below. You can reach out to me on email: akshat.iitj‚öΩgmail.com</p>

<hr />
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>Tech isn&rsquo;t putting business at risk just to explore new things. There is a fallback to REST incase gRPC fails. We are pretty mature that ways üòõ<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
<li id="fn:2">
<p><a href="https://devcentral.f5.com/articles/why-layer-7-load-balancing-doesnrsquot-suck">https://devcentral.f5.com/articles/why-layer-7-load-balancing-doesnrsquot-suck</a> <a href="http://wtarreau.blogspot.in/2006/11/making-applications-scalable-with-load.html">http://wtarreau.blogspot.in/2006/11/making-applications-scalable-with-load.html</a> <a href="https://www.loadbalancer.org/blog/why-layer-7-sucks/">https://www.loadbalancer.org/blog/why-layer-7-sucks/</a> <a href="https://serverfault.com/questions/233402/layer-4-vs-layer-7-load-balancing">https://serverfault.com/questions/233402/layer-4-vs-layer-7-load-balancing</a> <a href="https://www.nginx.com/resources/glossary/layer-4-load-balancing/">https://www.nginx.com/resources/glossary/layer-4-load-balancing/</a> <a href="https://www.nginx.com/resources/glossary/layer-7-load-balancing/">https://www.nginx.com/resources/glossary/layer-7-load-balancing/</a><a href="#fnref:2" rev="footnote">&#8617;</a></p></li>
<li id="fn:3">
<p><a href="https://medium.com/@copyconstruct/envoy-953c340c2dca">https://medium.com/@copyconstruct/envoy-953c340c2dca</a> <a href="https://githubengineering.com/introducing-glb/">https://githubengineering.com/introducing-glb/</a> <a href="https://githubengineering.com/glb-part-2-haproxy-zero-downtime-zero-delay-reloads-with-multibinder/">https://githubengineering.com/glb-part-2-haproxy-zero-downtime-zero-delay-reloads-with-multibinder/</a> <a href="https://www.microservices.com/talks/lyfts-envoy-monolith-service-mesh-matt-klein/">https://www.microservices.com/talks/lyfts-envoy-monolith-service-mesh-matt-klein/</a> <a href="http://blog.christianposta.com/microservices/00-microservices-patterns-with-envoy-proxy-series/">http://blog.christianposta.com/microservices/00-microservices-patterns-with-envoy-proxy-series/</a> <a href="https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191">https://eng.lyft.com/announcing-envoy-c-l7-proxy-and-communication-bus-92520b6c8191</a> <a href="https://eng.lyft.com/envoy-7-months-later-41986c2fd443">https://eng.lyft.com/envoy-7-months-later-41986c2fd443</a><a href="#fnref:3" rev="footnote">&#8617;</a></p></li>
<li id="fn:4">
<p><a href="https://envoyproxy.github.io/envoy/intro/arch_overview/grpc.html#arch-overview-grpc">https://envoyproxy.github.io/envoy/intro/arch_overview/grpc.html#arch-overview-grpc</a><a href="#fnref:4" rev="footnote">&#8617;</a></p></li>
<li id="fn:5">
<p>There are 42 people working on this actively <a href="https://medium.com/@copyconstruct/envoy-953c340c2dca">https://medium.com/@copyconstruct/envoy-953c340c2dca</a><a href="#fnref:5" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Quarter Summary] Jul-Sep 2017]]></title>
    <link href="http://olttwa.com/blog/2017/09/30/quarter-summary-jul-sep-2017/"/>
    <updated>2017-09-30T23:43:16+05:30</updated>
    <id>http://olttwa.com/blog/2017/09/30/quarter-summary-jul-sep-2017</id>
    <content type="html"><![CDATA[<p>I write about my quarterly goals, systems I set to achieve those goals and learnings as a result of that.</p>

<!-- more -->


<p>One day, my college senior Shobhit suddenly asked me: &ldquo;What have you done in the past one year of your job?&rdquo; I was blank. Because of multiple reasons, I revere him, I want to replicate him. So I asked him what system he has in place to help him achieve something. He told me he has quarterly goals.</p>

<h3>Goals</h3>

<ul>
<li>Read Norman Lewis Vocabulary builder</li>
<li>Read Andrew Hunt &amp; Dave Thomas Pragmatic Programmer</li>
<li>Read Kent Beck Test Driven Development</li>
<li>Track where my time goes so I know how to make time for myself</li>
</ul>


<h3>Systems</h3>

<p>The systems I set in place to help me achieve above goals had me giving 30-60 minutes everyday reading books. 10 minutes went into tracking what I&rsquo;d done for the day. I can safely say I&rsquo;ve spent atleast 12-14 hours this quarter planning how to achieve these goals.</p>

<h3>Results</h3>

<p>I fell short on every goal. I completed Norman Lewis 60%, Andy/Dave 52% and Kent Beck 37%. I was able to track myself for 35 days out of 90.</p>

<h3>Learnings</h3>

<ul>
<li>Planning a lot never helps. Try to come up with a MVP. If that works, build something on top of it. If it doesn&rsquo;t, find another way to achieve it.</li>
<li>Video watching had the greatest impact on time. On weekends, it gobbled up 8-10 hours, sometimes during weekdays it gobbled up 4+ hours which messed up my routine as I slept around 5 am and had to be in office by 10 am.</li>
<li>Big bang targets are very intimidating. Start small and build up on top of that.</li>
<li>I was off my system for a period of 5 weeks continuously because of travel. I should have planned some work during travel.</li>
</ul>


<p>Being a little depressed, my friend Asheet and I went for a walk today evening in the streets of Kodihalli. Cool breeze was flowing. There was light drizzle, and the clouds above made sure no star is to be seen. In this poetic setting, I cried my heart out in front of Asheet. I wanted to become 2 things I had been in the past:</p>

<ul>
<li>Study 2-3 hours everyday without any distractions. (At the age of 16, I have done this well over a period of 7 months)</li>
<li>Like everything I do. (In school, I listened very attentively to the teachers and friends' discussion. I always looked forward to waking up, going to school, playing football, studying, etc.)</li>
</ul>


<p>Out of our discussion, 3 learnings:</p>

<ul>
<li>Set small targets. After achieving those, go for same or higher targets. Example: I have been trying to reach office at 9 since last one year because that helps me in many ways. I am successful only 1 time per month on average. Instead, I can improve by 10 minutes week-on-week.</li>
<li>Forget the past system. The current scenario is different. Distractions, responsibilities have increased many fold. Need to build a system that is better suited for this time.</li>
<li>Find the sweet spot with expectations. Expecting a lot from yourselves can be very demotivating when those expectations aren&rsquo;t met. On the other hand, not having any expectations at all is unpractical.</li>
</ul>


<hr />

<hr />

<p>I hope this blog was helpful üòÄ. Please leave your thoughts in the comments section below. You can reach out to me on email: akshat.iitj‚öΩgmail.com</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Article Summary] Time Clocks and the Ordering of Events in a Distributed System]]></title>
    <link href="http://olttwa.com/blog/2017/08/21/article-summary-time-clocks-and-the-ordering-of-events-in-a-distributed-system/"/>
    <updated>2017-08-21T22:18:51+05:30</updated>
    <id>http://olttwa.com/blog/2017/08/21/article-summary-time-clocks-and-the-ordering-of-events-in-a-distributed-system</id>
    <content type="html"><![CDATA[<p>This scholarly article defines conditions for total ordering of events in a distributed system. Using the concept of total ordering, we see a way to build distributed systems. The article solves the problem of synchronisation in distributed systems.</p>

<!-- more -->


<p>The author of this article is Leslie Lamport</p>

<ul>
<li>First, we see &ldquo;happened before&rdquo; relation amongst events occuring in a distributed system. This is called partial ordering.</li>
<li>Then, we see conditions for logical clocks. An abstract definition of a clock is to assign a number/time to an event at the time it occurred.</li>
<li>Using the concept of partial ordering and logical clocks, we define total ordering of events. Prioritization of processes is used to break ties.</li>
<li>Then we see concept of total ordering being used to solve a mutual exclusion problem. In the problem, a fixed collection of processes are sharing a single resource.</li>
<li>We see how anomalous behaviours can break the algorithm mentioned to solve the above problem.</li>
<li>One way to prevent anomalous behaviours is to introduce Strong Clocks in the system. The Strong Clock condition is: <code>If event a has happened before event b (partial ordering defined by special relativity), then timestamp of a is lesser than timestamp of b</code></li>
<li>To quote the paper: <em>One of the mysteries of the universe is that it is possible to construct a system of physical clocks which, running quite independently of one another, will satisfy the Strong Clock Condition.</em></li>
<li>Then we see conditions for Physical Clocks to ensure they don&rsquo;t go out of synchronization.</li>
</ul>


<hr />

<p>üòÄ Thank you for reading this blog. Please leave your thoughts in the comments section below. You can reach out to me on email: akshat.iitj‚öΩgmail.com</p>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Humane and Effective Ways for Collecting Feedback]]></title>
    <link href="http://olttwa.com/blog/2017/03/17/humane-and-effective-ways-for-collecting-feedback/"/>
    <updated>2017-03-17T23:38:31+05:30</updated>
    <id>http://olttwa.com/blog/2017/03/17/humane-and-effective-ways-for-collecting-feedback</id>
    <content type="html"><![CDATA[<p>This blogpost will probably change your mind if:</p>

<ul>
<li>you think ratings matter while collecting feedback</li>
<li>feedback you gather isn&rsquo;t based on dynamic parameters</li>
<li>your system doesn&rsquo;t incentivize users giving honest and thoughtful feedback</li>
</ul>


<p><em>Disclaimer: This blogpost is oriented towards systems providing services
catered to a huge audience through various service providers. (e.g. Go-Jek,
Amazon, Uber, etc.) The principles maybe applied to other systems as well.</em></p>

<!-- more -->


<p>Feedback is information about how a system is doing in its efforts to reach a
long-term goal. A system would like to know what users want continued; stopped or improved. Keeping this in mind, lets explore what is wrong with the current feedback scenario, how to take better feedback and why incentivize users giving thoughtful feedback.</p>

<p>I will be taking an example of a ride hailing service. A <strong>driver</strong> is a service provider. The <strong>system</strong> under study offers its service to any <strong>user</strong> via a driver. A <strong>booking</strong> is an instance of the service provided to a user.</p>

<h2>Major Problems with feedback collection:</h2>

<p>I see 3 major problems with the current feedback system:</p>

<ol>
<li><p>Ratings don&rsquo;t signify anything. They end up creating unnececesary
stress amongst drivers, which in turn makes for a bad experience for users. Online product ratings average about 4.3 out of 5 stars all together, says PowerReviews, which runs ratings for more than 1,000 online shops. <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> For
example, when I scored 35 off 50 in an examination, it doesn&rsquo;t point to the root cause of the problem. There
could be multiple reasons: I made a silly mistake; the time provided wasn&rsquo;t sufficient; I hadn‚Äôt studied
some concepts; some questions were very difficult for my understanding
of the concept, etc. There is some problem if I score 35 marks on average across hundreds of examinations, but the root cause of the problem cannot be found merely with numbers.</p></li>
<li><p>It is common knowledge that drivers' earnings are affected because of
lower ratings on their feedback. Users give positive feedback even on bad experiences simply out of sympathy for the driver. A major cause for this sympathy is constant nagging of
drivers to give positive feedback.</p></li>
<li><p>Users do not revisit a platform immediately after completion of a booking. Some systems make it mandatory for the user to provide feedback for every booking. It is better to collect no data than end up getting inaccurate data.</p></li>
</ol>


<h2>How to take better feedback?</h2>

<p>Here are some suggestions which might directly impact the quality of feedback a system gathers:</p>

<ul>
<li><p>Keep the feedback parameters dynamic. I will take example of an alarm clock. Every morning I hit snooze/dismiss button almost involuntarily because I know where the button on my alarm clock is and I don&rsquo;t put a lot of thought at that point of time. Don&rsquo;t let users give valuable feedback involuntarily.</p></li>
<li><p>Let the users make as less decisions as possible when requested for feedback. I suggest 3 buttons. One indicates positive feedback, another negative. Upon clicking the negative button, request for further pre-defined standard tags to know reason of bad experience. The third button is dynamic; which is customized based on time, price, area and driver. For example, we can gather feedback for navigation in certain areas, route selection of ride during rush hours, rash drivings feedback for certain drivers, etc. This helps in finding the root cause of a problem.</p></li>
<li><p>Timing is important. Know when most honest and valid feedback can be obtained. For a taxi ride, a user can be requested for feedback if he/she revisits the platform immediately after the booking. For food deliveries, wait atleast for 12 hours so the user knows nothing&rsquo;s wrong with his/her tummy before giving feedback. For non-consumable deliveries, wait for 1 month until the user finds out the durability of the product after decent amount of usage. When users doesn&rsquo;t revisit the platform for a considerable amount of time, never prompt for feedback. This will solve the 3rd problem. If they want to give feedback, they can always visit the bookings history page and give feedback.</p></li>
<li><p>Communicate problem to the user if it is known beforehand. Delay in fulfillment of service due to bad weather, traffic, etc. if communicated to the user on the feedback screen will likely result in more accurate data. This combined with dynamic parameterization of feedback can probably solve the first two problems.</p></li>
<li><p>Text box is one of the most important part of a feedback screen. Users going out of their way to give different feedback provide useful information. What&rsquo;s interesting is frequent comments can be turned into buttons!</p></li>
</ul>


<h2>Incentivizing users</h2>

<p>Feedback refers to the past, or at best, to the present. Wouldn&rsquo;t it be
awesome if users shape the future of business? Identify users who are consistently giving accurate feedback; and take the pain of giving critical comments. Request these users for a detailed survey and incentivize them. This is very important. If a system has 1 million+ users, it should utilize extensive surveys to their advantage. On the plus side, users treating a platform with sincerity will stay delighted.</p>

<h2>Summary</h2>

<p>To sum it up:</p>

<ul>
<li>Focus on relevant data while collecting feedback</li>
<li>Keep the process of giving feedback non-mechanical and dynamic</li>
<li>Put users in the driver seat of the system</li>
</ul>


<p>After all, every system survives based solely on the loyalty of its
users. When the users believe they are part of the system, loyalty
grows.</p>

<hr />

<hr />

<p>I hope this blog was helpful üòÄ. Please leave your thoughts in the comments section below. You can reach out to me on email: akshat.iitj‚öΩgmail.com</p>

<hr />
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p><a href="https://www.wsj.com/articles/when-4-3-stars-is-average-the-internets-grade-inflation-problem-1491414200">an article on wsj</a><a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[o.l.t.t.w.a.]]></title>
    <link href="http://olttwa.com/blog/2017/03/17/o-dot-l-t-dot-t-w-dot-a/"/>
    <updated>2017-03-17T23:32:57+05:30</updated>
    <id>http://olttwa.com/blog/2017/03/17/o-dot-l-t-dot-t-w-dot-a</id>
    <content type="html"><![CDATA[<p>I believe every decision we make in our lives, we make in order to have One
Less Thing To Worry About.</p>

<!-- more -->


<p>It is very simple. From the start, our parents educate us; try to
inculcate good values into us. The only goal they are trying to achieve
is that we&rsquo;ll have less things to worry about when we grow up. That is
how this philosophy seeps into our mind.</p>

<p>Ofcourse there is a trade-off between long-term and short-term goals.
When we keep persisting despite failures, it will be beneficial in the
long-term. When we decide to give up and give-in to distraction, it is
beneficial in the short-term. But the goal is simple - olttwa.</p>

<p>Many a times, we realize much later that our decisions have
given rise to hundred more things to worry about. For example,
fertilizers have caused imbalance in the biological ecosystem; automation has given rise to unemployment and
many more.</p>

<p>I am learning to design sustainable systems. Please comment here, reach out to me on
akshat.iitj@gmail.com, or twitter if you wish to discuss anything.</p>
]]></content>
  </entry>
  
</feed>
